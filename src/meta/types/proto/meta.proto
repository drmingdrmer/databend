// Copyright 2021 Datafuse Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package meta;

import "request.proto";

message Empty {}

message RaftRequest {
  string data = 1;
}

message RaftReply {
  string data = 1;
  string error = 2;
}

message MemberListRequest { string data = 1; }

message MemberListReply { repeated string data = 1; }

message HandshakeRequest {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

message HandshakeResponse {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

// Data chunk for export/import meta data
message ExportedChunk { repeated string data = 10; }

message WatchRequest {
  // key is the key to register for watching.
  string key = 1;

  // `key_end`` is the end of the range [key, key_end) to watch.
  // If key_end is None, then watch only key.
  // If want to watch prefix of key, use `get_start_and_end_of_prefix` to
  // generate [key, key_end).
  optional string key_end = 2;

  enum FilterType {
    // recv all kind update event.
    ALL = 0;
    // filter only update event.
    UPDATE = 1;
    // filter only delete event.
    DELETE = 2;
  }
  FilterType filter_type = 3;
}

message Event {
  string key = 1;

  // current hold current value of key(if any)
  optional SeqV current = 2;

  // prev value of key(if any)
  optional SeqV prev = 3;
}

message WatchResponse { Event event = 1; }

// messages for txn
message TxnCondition {
  // condition result
  enum ConditionResult {
    EQ = 0;
    GT = 1;
    GE = 2;
    LT = 3;
    LE = 4;
    NE = 5;
  }

  string key = 1;

  oneof target {
    // used when compare value
    bytes value = 2;
    // used when compare seq
    uint64 seq = 3;
  }

  // the expected result of condition, if `expected` match the condition result,
  // then the `if_then` op will be executed, otherwise `else_then` op will be
  // executed.
  ConditionResult expected = 4;
}

message TxnOp {
  oneof request {
    TxnGetRequest get = 1;
    TxnPutRequest put = 2;
    TxnDeleteRequest delete = 3;
    TxnDeleteByPrefixRequest delete_by_prefix = 4;
  }
}

message TxnOpResponse {
  oneof response {
    TxnGetResponse get = 1;
    TxnPutResponse put = 2;
    TxnDeleteResponse delete = 3;
    TxnDeleteByPrefixResponse delete_by_prefix = 4;
  }
}

message TxnRequest {
  // `condition` is a list of predicates.
  // If all of them success, the `if_then` will be executed,
  // otherwise `else_then` op will be executed.
  repeated TxnCondition condition = 1;

  // `if_then` is a list of operations will be executed when all condition
  // evaluates to true.
  repeated TxnOp if_then = 2;

  // `else_then` is a list of operations will be executed when not all condition
  // evaluates to true.
  repeated TxnOp else_then = 3;
}

message TxnReply {
  bool success = 1;
  repeated TxnOpResponse responses = 2;
  string error = 3;
}

// Item of a transaction request stream.
message TxnRequestItem {
  // The payload is either a condition to assert before executing the transaction,
  // or an operation to execute when all conditions are met, or an operation to execute when not all conditions are met.
  oneof txn_request_payload {
    TxnCondition condition = 11;
    TxnOp        then_op   = 12;
    TxnOp        else_op   = 13;
  }
}

// Item of a transaction reply stream.
message TxnReplyItem {
  // The payload is either a header of the transaction reply, or a response to an operation.
  oneof txn_reply_payload {
    TxnReplyHeader header   = 11;
    TxnOpResponse  response = 12;
  }
}

//
message TxnReplyHeader {
  bool   success = 11;
  string error   = 12;
}


message ClusterStatus {
  uint64 id = 1;
  string binary_version = 2;
  string data_version = 3;
  string endpoint = 4;
  uint64 db_size = 5;
  string state = 6;
  bool is_leader = 7;
  uint64 current_term = 8;
  uint64 last_log_index = 9;
  string last_applied = 10;
  optional string snapshot_last_log_id = 11;
  optional string purged = 12;
  optional string leader = 13;
  map<uint64, string> replication = 14;
  repeated string voters = 15;
  repeated string non_voters = 16;
  uint64 last_seq = 17;
}

message ClientInfo {
  // The address of the connected in form of "<ip>:<port>"
  string client_addr = 10;
}

// Item for a Streaming read reply, e.g., for `Mget` and `List`.
message StreamItem {
  string key = 1;
  optional SeqV value = 2;
}

message SnapshotChunkRequest {
  uint64 ver = 100;

  // json serialized meta data, including vote and snapshot_meta.
  // ```text
  // { vote: Vote, meta: SnapshotMeta }
  // ```
  string rpc_meta = 10;

  SnapshotChunkV1 chunk = 20;
}

message SnapshotChunkV1 {
  uint64 offset = 10;
  bool done = 11;
  bytes data = 12;
}

service RaftService {

  // Forward a request to another node.
  rpc Forward(RaftRequest) returns (RaftReply);

  // Handling internally redirected KvReadV1 request.
  // Without checking token.
  rpc KvReadV1(RaftRequest) returns (stream StreamItem);

  // raft RPC

  rpc AppendEntries(RaftRequest) returns (RaftReply);
  rpc InstallSnapshot(RaftRequest) returns (RaftReply);
  rpc InstallSnapshotV1(SnapshotChunkRequest) returns (RaftReply);
  rpc Vote(RaftRequest) returns (RaftReply);
}

service MetaService {
  // handshake
  rpc Handshake(stream HandshakeRequest) returns (stream HandshakeResponse);

  // General KV API for get, mget, list, and upsert;
  // It is introduced to replace `WriteMsg` and `ReadMsg`.
  //
  // Since: 0.8.35; 2022-09-14
  rpc KvApi(RaftRequest) returns (RaftReply);

  // Handle application read request.
  //
  // This API is not exposed to client directly, but is only used for internal request forwarding.
  // The request will be forwarded to leader if current node is not leader.
  // It returns a stream of `StreamItem`.
  // - For single-reply request, the stream contains only one item, e.g. `Get`.
  // - For multi-reply request, the stream contains multiple items, e.g. `MGet` and `List`.
  rpc KvReadV1(RaftRequest) returns (stream StreamItem);

  // Export all meta data.
  //
  // Including raft hard state, logs and state machine.
  // The exported data is a list of json strings in form of `(tree_name,
  // sub_tree_prefix, key, value)`.
  rpc Export(Empty) returns (stream ExportedChunk);

  // Add watch key stream.
  // Whenever the watch key data updated, client will be notified across the
  // stream.
  rpc Watch(WatchRequest) returns (stream WatchResponse);

  rpc Transaction(TxnRequest) returns (TxnReply);

  // Get MetaSrv member list endpoints
  rpc MemberList(MemberListRequest) returns (MemberListReply);

  // Get cluster status
  // Since: 2023-10-19
  rpc GetClusterStatus(Empty) returns (ClusterStatus);

  // Respond with the information about the client.
  // Since: 2022-09-09 0.8.30
  rpc GetClientInfo(Empty) returns (ClientInfo);
}
